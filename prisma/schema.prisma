generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  role           Role            @default(PARISHIONER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  phone          String?
  activities     ActivityLog[]
  eventRsvps     EventRsvp[]
  massIntentions MassIntention[]
  payments       Payment[]
  thanksgivings  Thanksgiving[]

  @@index([email])
  @@index([role])
}

model Mass {
  id                          String          @id @default(uuid())
  title                       String
  date                        DateTime
  location                    String
  availableIntentionsSlots    Int
  availableThanksgivingsSlots Int
  status                      MassStatus      @default(AVAILABLE)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  massIntentions              MassIntention[]
  thanksgivings               Thanksgiving[]

  @@index([date])
  @@index([status])
}

model MassIntention {
  id        String   @id @default(uuid())
  userId    String
  name      String
  intention String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  massId    String
  mass      Mass     @relation(fields: [massId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([massId])
  @@index([status])
}

model Thanksgiving {
  id          String   @id @default(uuid())
  userId      String
  description String
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  massId      String
  mass        Mass     @relation(fields: [massId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([massId])
  @@index([status])
}

model Payment {
  id          String           @id @default(uuid())
  userId      String
  amount      Float
  type        PaymentType
  description String?
  reference   String?          @unique
  status      PaymentStatus    @default(UNPAID)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  goalId      String?
  category    PaymentCategory?
  goal        PaymentGoal?     @relation(fields: [goalId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([goalId])
  @@index([createdAt])
}

model Event {
  id          String      @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  capacity    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  rsvps       EventRsvp[]

  @@index([date])
}

model EventRsvp {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([userId])
  @@index([eventId])
}

model PaymentGoal {
  id            String          @id @default(uuid())
  title         String
  description   String
  category      PaymentCategory
  targetAmount  Float
  currentAmount Float           @default(0)
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  payments      Payment[]

  @@index([category])
  @@index([startDate, endDate])
}

model ChurchInfo {
  id        String   @id @default(uuid())
  name      String
  address   String
  phone     String
  email     String
  mission   String
  vision    String
  history   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  title       String
  description String
  dayOfWeek   Int
  time        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([dayOfWeek])
}

model ActivityLog {
  id         String       @id @default(uuid())
  userId     String
  action     String
  type       ActivityType
  entityId   String?
  entityType String?
  read       Boolean      @default(false)
  createdAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
  @@index([entityId, entityType])
}

model SystemNotification {
  id        String    @id @default(uuid())
  title     String
  message   String
  type      String    @default("info")
  active    Boolean   @default(true)
  userRole  String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([active, expiresAt])
  @@index([userRole])
}

enum Role {
  PARISHIONER
  ADMIN
  SUPERADMIN
}

enum MassStatus {
  AVAILABLE
  FULL
}

enum PaymentType {
  DONATION
  OFFERING
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
}

enum PaymentCategory {
  TITHE
  OFFERING
  SPECIAL_PROJECT
  OTHER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum ActivityType {
  PARISHIONER
  ADMIN
}
